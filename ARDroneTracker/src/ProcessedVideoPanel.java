/*
 * VideoPanel.java
 * 
 * Created on 21.05.2011, 18:42:10
 */



import com.codeminders.ardrone.ARDrone;
import com.codeminders.ardrone.DroneVideoListener;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicReference;

/**
 * 
 * @author normenhansen
 */
@SuppressWarnings("serial")
public class ProcessedVideoPanel extends javax.swing.JPanel implements DroneVideoListener
{
    private AtomicReference<BufferedImage> image          = new AtomicReference<BufferedImage>();
    private AtomicBoolean                  preserveAspect = new AtomicBoolean(true);
    private BufferedImage                  noConnection   = new BufferedImage(320, 240, BufferedImage.TYPE_INT_RGB);

    /** Creates new form VideoPanel */
    public ProcessedVideoPanel()
    {
        initComponents();
        Graphics2D g2d = (Graphics2D) noConnection.getGraphics();
        Font f = g2d.getFont().deriveFont(24.0f);
        g2d.setFont(f);
        g2d.drawString("No video connection", 40, 110);
        image.set(noConnection);
    }

    public void setDrone(ARDrone drone)
    {
        drone.addImageListener(this);
    }

    public void setPreserveAspect(boolean preserve)
    {
        preserveAspect.set(preserve);
    }


    @Override
    public void paintComponent(Graphics g)
    {
        Graphics2D g2d = (Graphics2D) g;
        g2d.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        int width = getWidth();
        int height = getHeight();
        drawDroneImage(g2d, width, height);
    }

    private void drawDroneImage(Graphics2D g2d, int width, int height)
    {
        BufferedImage im = image.get();
        if(im == null)
        {
            return;
        }
        int xPos = 0;
        int yPos = 0;
        if(preserveAspect.get())
        {
            g2d.setColor(Color.BLACK);
            g2d.fill3DRect(0, 0, width, height, false);
            float widthUnit = ((float) width / 4.0f);
            float heightAspect = (float) height / widthUnit;
            float heightUnit = ((float) height / 3.0f);
            float widthAspect = (float) width / heightUnit;

            if(widthAspect > 4)
            {
                xPos = (int) (width - (heightUnit * 4)) / 2;
                width = (int) (heightUnit * 4);
            } else if(heightAspect > 3)
            {
                yPos = (int) (height - (widthUnit * 3)) / 2;
                height = (int) (widthUnit * 3);
            }
        }
        if(im != null)
        {
            g2d.drawImage(im, xPos, yPos, width, height, null);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed"
    // desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        setLayout(new java.awt.GridLayout(4, 6));
    }// </editor-fold>//GEN-END:initComponents
     // Variables declaration - do not modify//GEN-BEGIN:variables
     // End of variables declaration//GEN-END:variables
    
    
    
    
    
    
    
    ///////////////////////////////////////
    //////////// EDIT WITH KAS ////////////
    ///////////////////////////////////////
    
    
    
	private static String imgpath = "./data";
	private static double mnr = 115;
	private static double mng = 49;
	private static double mnb = 75;
	private static double str = 4;
	private static double stg = 7;
	private static double stb = 5;
	private static double slack = 4.0;
	
	// Results
	private static double tgt_x;
	private static double tgt_y;
	private static BufferedImage processedImage;
	private static boolean success;
	
	private static int count = 0;
	
	
	public double getTargetX()
    {
    	return tgt_x; 
    }
	
	public double getTargetY()
    {
    	return tgt_y; 
    }
	
	private static boolean isPixelTarget(int r, int g, int b) {
	    // System.out.format("%d %d %d\n", r, g, b);
	    if (r < (mnr - str * slack)) return false;
	    if (r > (mnr + str * slack)) return false;
	    if (g < (mng - stg * slack)) return false;
	    if (g > (mng + stg * slack)) return false;
	    if (b < (mnb - stb * slack)) return false;
	    if (b > (mnb + stb * slack)) return false;
	    return true;
	}
	
	private static void processImage(BufferedImage image) {
	    int height = image.getHeight();
	    int width = image.getWidth();
	    processedImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
	    // double tgt_x = 0.0;
	    // double tgt_y = 0.0;
	    count = 0;
	    for (int j = 0; j < height; ++j) {
	        for (int i = 0; i < width; ++i) {
	            Color col = new Color(image.getRGB(i, j));
	            int r = col.getRed();
	            int g = col.getGreen();
	            int b = col.getBlue();
	
	            if (isPixelTarget(r, g, b)) {
	                tgt_x += i;
	                tgt_y += j;
	                ++count;
	                processedImage.setRGB(i, j, Color.green.getRGB());
	            }
	            else {
	                processedImage.setRGB(i, j, col.getRGB());
	                // processedImage.setRGB(i, j, col.getRGB());
	            }
	
	        }
	    }
	
	    if (count > 0) {
	        tgt_x /= (double)count;
	        tgt_y /= (double)count;
	        success = true;
	    } else {
	        success = false;
	    }
	}
	
	@Override
    public void frameReceived(int startX, int startY, int w, int h, int[] rgbArray, int offset, int scansize)
    {
		/*
		StringBuffer sb = new StringBuffer();
		sb.append("startX " + startX + "  | " );
		sb.append("startY " + startY + "  | " );
		sb.append("w " + w + "  | " );
		sb.append("h " + h + "  | " );
		sb.append("offset " + offset + "  | " );
		sb.append("scansize " + scansize + "  | " );
		System.out.println( sb );
		*/
		
        BufferedImage im = new BufferedImage(w, h, BufferedImage.TYPE_INT_RGB);  // create blank frame
        im.setRGB(startX, startY, w, h, rgbArray, offset, scansize);  // copy pixels across 

        processImage( im );
        
        //im.setRGB(startX, startY, w, h, rgbArray, offset, scansize);
        image.set( processedImage );
        repaint();
        
        System.out.printf( "TARGET: (%s,%s)\n", tgt_x, tgt_y );
    }
}
